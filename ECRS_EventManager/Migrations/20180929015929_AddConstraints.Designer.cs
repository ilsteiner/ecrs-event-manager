// <auto-generated />
using ECRS_EventManager.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace ECRS_EventManager.Migrations
{
    [DbContext(typeof(ECRS_EventManagerContext))]
    [Migration("20180929015929_AddConstraints")]
    partial class AddConstraints
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EventManager.Models.Address", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("IsPrimary");

                    b.Property<string>("Line1");

                    b.Property<string>("Line2");

                    b.Property<string>("Line3");

                    b.Property<Guid?>("PersonID");

                    b.Property<string>("PostalCode");

                    b.Property<string>("State");

                    b.Property<string>("Type");

                    b.Property<DateTime>("UpdatedOn");

                    b.HasKey("ID");

                    b.HasIndex("PersonID");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("EventManager.Models.Event", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("EventName");

                    b.Property<string>("FormID")
                        .IsRequired();

                    b.Property<string>("FormInternalName");

                    b.Property<string>("FormName");

                    b.Property<DateTime>("UpdatedOn");

                    b.HasKey("ID");

                    b.HasAlternateKey("FormID");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("EventManager.Models.Person", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("BillingAddressID");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("Gender");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("MiddleInitial")
                        .HasMaxLength(2);

                    b.Property<string>("MiddleName")
                        .HasMaxLength(255);

                    b.Property<string>("NamePrefix")
                        .HasMaxLength(31);

                    b.Property<string>("NameSuffix")
                        .HasMaxLength(31);

                    b.Property<string>("Phone");

                    b.Property<DateTime>("UpdatedOn");

                    b.HasKey("ID");

                    b.HasIndex("BillingAddressID");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("EventManager.Models.Registration", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<Guid>("EventID");

                    b.Property<string>("FormAdminLink")
                        .IsRequired();

                    b.Property<string>("FormEditLink")
                        .IsRequired();

                    b.Property<string>("FormEntryID")
                        .IsRequired();

                    b.Property<Guid>("PayorID");

                    b.Property<DateTime>("SubmittedOn");

                    b.Property<DateTime>("UpdatedOn");

                    b.HasKey("ID");

                    b.HasIndex("EventID");

                    b.HasIndex("PayorID");

                    b.ToTable("Registration");
                });

            modelBuilder.Entity("EventManager.Models.RegistrationEntry", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<Guid>("PersonID");

                    b.Property<Guid?>("RegistrationID");

                    b.Property<DateTime>("SubmittedOn");

                    b.Property<DateTime>("UpdatedOn");

                    b.HasKey("ID");

                    b.HasIndex("PersonID");

                    b.HasIndex("RegistrationID");

                    b.ToTable("RegistrationEntry");
                });

            modelBuilder.Entity("EventManager.Models.Address", b =>
                {
                    b.HasOne("EventManager.Models.Person")
                        .WithMany("Addresses")
                        .HasForeignKey("PersonID");
                });

            modelBuilder.Entity("EventManager.Models.Person", b =>
                {
                    b.HasOne("EventManager.Models.Address", "BillingAddress")
                        .WithMany()
                        .HasForeignKey("BillingAddressID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EventManager.Models.Registration", b =>
                {
                    b.HasOne("EventManager.Models.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EventManager.Models.Person", "Payor")
                        .WithMany()
                        .HasForeignKey("PayorID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EventManager.Models.RegistrationEntry", b =>
                {
                    b.HasOne("EventManager.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EventManager.Models.Registration")
                        .WithMany("Entries")
                        .HasForeignKey("RegistrationID");
                });
#pragma warning restore 612, 618
        }
    }
}
